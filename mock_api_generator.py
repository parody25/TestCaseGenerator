import streamlit as st
import json
import yaml
from openai import OpenAI
from io import StringIO
from dotenv import load_dotenv
import os

load_dotenv()
openai_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def mock_api_generator():
    st.title("üß™ Mock API / Service Generator")

    mode = st.radio("Choose how you'd like to start:", ["Upload OpenAPI Spec", "Describe API in Natural Language"])

    if mode == "Upload OpenAPI Spec":
        uploaded_file = st.file_uploader("Upload OpenAPI spec (.yaml or .json)", type=["yaml", "yml", "json"])
        if uploaded_file:
            try:
                content = uploaded_file.read().decode("utf-8")
                if uploaded_file.name.endswith(".json"):
                    spec = json.loads(content)
                else:
                    spec = yaml.safe_load(content)

                st.success("‚úÖ Spec Loaded Successfully")

                if st.button("üîß Generate Mock Server Code"):
                    code = generate_fastapi_mock_from_spec(spec)
                    st.code(code, language="python")

                    st.download_button(
                        label="‚¨áÔ∏è Download Mock Server (Python)",
                        data=code,
                        file_name="mock_api.py",
                        mime="text/x-python"
                    )
            except Exception as e:
                st.error(f"‚ùå Failed to parse spec: {e}")

    else:
        desc = st.text_area("Describe your API endpoints (e.g. 'Create a customer with POST, fetch list with GET')")

        if st.button("üß† Convert to OpenAPI + Generate Mock"):
            try:
                with st.spinner("Generating OpenAPI spec using GenAI..."):
                    response = openai_client.chat.completions.create(
                        model="gpt-4o",
                        messages=[
                            {"role": "system", "content": "Convert the following API description to OpenAPI 3.0 JSON format. Return only the raw JSON object, no markdown or explanation."},
                            {"role": "user", "content": desc}
                        ]
                    )

                    raw_json = response.choices[0].message.content.strip()
                    print("üîç Raw LLM Output:\n", raw_json)

                    # Remove markdown formatting if present
                    if raw_json.startswith("```json"):
                        raw_json = raw_json.split("```json")[1].split("```")[0].strip()
                    elif raw_json.startswith("```"):
                        raw_json = raw_json.split("```")[1].split("```")[0].strip()

                    st.subheader("üì¶ Raw LLM Output")
                    st.text_area("Edit or inspect the LLM response before parsing", value=raw_json, height=300)

                    # Try to parse the cleaned JSON
                    try:
                        spec = json.loads(raw_json)
                    except json.JSONDecodeError as e:
                        st.error("‚ùå LLM did not return valid JSON.")
                        st.code(raw_json, language="json")
                        return

                st.subheader("üßæ OpenAPI Generated by GenAI")
                st.json(spec)

                code = generate_fastapi_mock_from_spec(spec)
                st.subheader("üöÄ Mock API Server (FastAPI)")
                st.code(code, language="python")

                st.download_button("‚¨áÔ∏è Download FastAPI Mock", code, file_name="mock_api.py")

            except Exception as e:
                st.error(f"‚ùå LLM or parsing failed: {e}")

def generate_fastapi_mock_from_spec(spec):
    """Convert OpenAPI spec to basic FastAPI mock code"""
    code_lines = [
        "from fastapi import FastAPI, Body",
        "from typing import Optional",
        "app = FastAPI()\n"
    ]

    paths = spec.get("paths", {})
    for path, methods in paths.items():
        for method, details in methods.items():
            func_name = details.get("operationId", f"{method}_{path.replace('/', '_').strip('_')}")
            summary = details.get("summary", f"Mock response for {method.upper()} {path}")
            code_lines.append(f"@app.{method}(\"{path}\")")
            code_lines.append(f"async def {func_name}():")
            code_lines.append(f"    return {{\"message\": \"{summary}\"}}\n")

    return "\n".join(code_lines)
